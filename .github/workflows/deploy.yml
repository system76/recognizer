name: Deploy

on:
  push:
    branches:
      - master
      - staging

jobs:
  Lint:
    runs-on: ubuntu-latest

    container:
      image: elixir:1.9-alpine

    steps:
      - name: Checkout Code
        uses: actions/checkout@v1

      - name: Install Dependencies
        run: |
          apk add --no-cache gcc g++ git libmcrypt-dev make musl-dev
          mix local.rebar --force
          mix local.hex --force
          mix deps.get

      - name: Run Formatter
        run: mix format --check-formatted

      - name: Run Credo
        run: mix credo

  Test:
    runs-on: ubuntu-latest

    container:
      image: elixir:1.9-alpine

    services:
      mysql:
        image: mysql:5.7.24
        env:
          MYSQL_ROOT_PASSWORD: recognizer

      redis:
        image: redis

    steps:
      - name: Checkout Code
        uses: actions/checkout@v1

      - name: Install Dependencies
        run: |
          apk add --no-cache gcc g++ git imagemagick libmcrypt-dev make musl-dev
          mix local.rebar --force
          mix local.hex --force
          mix deps.get

      - name: Run Tests
        run: mix test
        env:
          DB_HOST: mysql
          DB_PORT: ${{ job.services.mysql.ports[3306] }}
          REDIS_HOST: redis
          REDIS_PORT: ${{ job.services.redis.ports[6379] }}

  Deploy:
    runs-on: ubuntu-latest
    needs:
      - Lint
      - Test

    steps:
      - name: Dependencies
        run: sudo apt install -y awscli

      - name: Checkout
        uses: actions/checkout@v1

      - name: Environment
        run: |
          if [ $GITHUB_REF == "refs/heads/master" ]; then
            echo "::set-env name=IMAGE_URL::${{ secrets.PRODUCTION_ECR_URL }}"
            echo "::set-env name=AWS_ACCESS_KEY_ID::${{ secrets.PRODUCTION_ACCESS_KEY }}"
            echo "::set-env name=AWS_SECRET_ACCESS_KEY::${{ secrets.PRODUCTION_ACCESS_SECRET }}"
          elif [ $GITHUB_REF == "refs/heads/staging" ]; then
            echo "::set-env name=IMAGE_URL::${{ secrets.STAGING_ECR_URL }}"
            echo "::set-env name=AWS_ACCESS_KEY_ID::${{ secrets.STAGING_ACCESS_KEY }}"
            echo "::set-env name=AWS_SECRET_ACCESS_KEY::${{ secrets.STAGING_ACCESS_SECRET }}"
          fi

      - name: Build
        run: make build

      - name: Push
        run: make push
