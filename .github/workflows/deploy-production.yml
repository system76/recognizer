---

name: Deploy Production

on:
  push:
    branches:
      - master
  workflow_dispatch: {}

jobs:
  Publish:
    runs-on: ubuntu-latest

    steps:
      - name: Configure
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PRODUCTION_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PRODUCTION_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.PRODUCTION_AWS_REGION }}

      - name: Authenticate
        id: authenticate
        uses: aws-actions/amazon-ecr-login@v1

      - name: Checkout
        uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: Publish
        id: publish
        env:
          ECR_REPOSITORY: ${{ secrets.PRODUCTION_AWS_ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build \
            --build-arg BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ") \
            --build-arg VCS_REF=$IMAGE_TAG \
            --build-arg VERSION=$IMAGE_TAG \
            --build-arg DOMAIN=account.system76.com \
            --tag $ECR_REPOSITORY:$IMAGE_TAG \
            .

          docker push $ECR_REPOSITORY:$IMAGE_TAG

          docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REPOSITORY:latest
          docker push $ECR_REPOSITORY:latest

          echo "::set-output name=image::$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Grab
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ secrets.PRODUCTION_AWS_TASK_DEFINITION }} \
            --query taskDefinition > /tmp/task.json

      - name: Template
        id: template
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: /tmp/task.json
          container-name: app
          image: ${{ steps.publish.outputs.image }}

      - name: Deploy
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        timeout-minutes: 15
        with:
          task-definition: ${{ steps.template.outputs.task-definition }}
          service: production-system76-recognizer
          cluster: system76-us-east-2
          wait-for-service-stability: false

      - name: Check ECS Service Status
        run: |
          echo "Checking ECS service status..."
          aws ecs describe-services \
            --cluster system76-us-east-2 \
            --services production-system76-recognizer \
            --query 'services[0].{Status:status,RunningCount:runningCount,PendingCount:pendingCount,DesiredCount:desiredCount}'
          
          echo "Getting recent ECS events..."
          aws ecs describe-services \
            --cluster system76-us-east-2 \
            --services production-system76-recognizer \
            --query 'services[0].events[:10]'
          
          echo "Getting task details..."
          if aws ecs list-tasks --cluster system76-us-east-2 --service-name production-system76-recognizer --query 'taskArns[0]' --output text 2>/dev/null; then
            TASK_ARN=$(aws ecs list-tasks \
              --cluster system76-us-east-2 \
              --service-name production-system76-recognizer \
              --query 'taskArns[0]' --output text)
            
            if [ "$TASK_ARN" != "None" ] && [ "$TASK_ARN" != "" ]; then
              echo "Task ARN: $TASK_ARN"
              aws ecs describe-tasks \
                --cluster system76-us-east-2 \
                --tasks $TASK_ARN \
                --query 'tasks[0].{LastStatus:lastStatus,HealthStatus:healthStatus,CreatedAt:createdAt,StoppedReason:stoppedReason}' 2>/dev/null || echo "Could not get task details"
              
              echo "Getting container details..."
              aws ecs describe-tasks \
                --cluster system76-us-east-2 \
                --tasks $TASK_ARN \
                --query 'tasks[0].containers[?name==`app`].{Name:name,LastStatus:lastStatus,ExitCode:exitCode,Reason:reason}' 2>/dev/null || echo "Could not get container details"
            else
              echo "No tasks found"
            fi
          else
            echo "Permission denied for ListTasks - checking CloudWatch Logs instead"
            echo "Check logs at: https://console.aws.amazon.com/cloudwatch/home?region=us-east-2#logsV2:log-groups/log-group/%2Fecs%2Fproduction-system76-recognizer"
          fi
